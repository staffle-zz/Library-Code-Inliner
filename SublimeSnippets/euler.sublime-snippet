<snippet>
	<description>euler</description>
	<content><![CDATA[const int N=1e5+5;
int m, n, s;
vector<int> in, out;
vector<vector<int>>g;
bitset<N>vis ;
list<int> res;
void dfs(int i) {
    vis[i] = 1;
    for (int &j : g[i])if (!vis[j])dfs(j);
}
bool ok() {
    s = -1;
    for (int i = 0 ; i < n; i++) {
        if (out[i] - in[i] == 1) {
            if (s != -1)return 0;
            s = i;
        } else if (abs(out[i] - in[i]) > 1)return 0;
    }
    if (s == -1)for (s = 0; s < n && !out[s]; s++);
    vis.reset();
    dfs(s);
    for (int i = 0; i < n; i++)if ((in[i] || out[i]) && !vis[i])return 0;
    return 1;
}
void euler(int i){
    while(out[i])euler(g[i][--out[i]]);
    res.push_front(i);
}]]></content>
	<tabTrigger>euler</tabTrigger>
	<scope>source.c, source.objc, source.c++, source.objc++</scope>
</snippet>
